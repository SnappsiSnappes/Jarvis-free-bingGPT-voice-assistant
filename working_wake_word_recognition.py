# –ò—Å–ø–æ–ª—å–∑—É—è –º–æ–¥—É–ª—å pvporcupine —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–ª—É—à–∞–µ—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Å–ª–æ–≤–æ "–æ—Ç–º–µ–Ω–∞"
# –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–¥ = print('–æ—Ç–º–µ–Ω–∞')
# –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏ —Å–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ - "–æ—Ç–º–µ–Ω–∞" , —á—Ç–æ–±—ã —É–≤–∏–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç

# –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö —Ñ—É–Ω–∫—Ü–∏–∏ conn=None –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ–¥–µ.
# Conn = connection –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è Pipe multiprocessing

def main(conn=None):
    import pvporcupine
    import configparser

    from pvrecorder import PvRecorder
    from rich import print
    config = configparser.ConfigParser()
    config.read('config.ini')
    keyward_path = r'vosk_+_pvporcupine\–æ—Ç–º–µ–Ω–∞_ru_windows_v2_2_0.ppn'
    model_path = r'vosk_+_pvporcupine\porcupine_params_ru.pv'
    PICOVOICE_TOKEN   = config.get('PICOVOICE_TOKEN','token')
    porcupine         = pvporcupine.create(
        access_key    = PICOVOICE_TOKEN,
        keyword_paths=[f'{keyward_path}'], 
        keywords=['–æ—Ç–º–µ–Ω–∞'],
        model_path=f'{model_path}',
        sensitivities = [0]
    )


    # VOSK
    MICROPHONE_INDEX  = int(config.get('MIC','microphone_index'))
    # model            = vosk.Model("model_small")
    # samplerate       = 16000
    # BUFFER_SIZE      = 512                        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç –≤ –±—É—Ñ–µ—Ä–µ –∑–∞–ø–∏—Å–∏
    # SAMPLE_RATE      = 16000                      # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
    # device           = MICROPHONE_INDEX
    # kaldi_rec         = vosk.KaldiRecognizer(model, samplerate)
    # p = pyaudio.PyAudio()
    recorder = PvRecorder(device_index=MICROPHONE_INDEX, frame_length=porcupine.frame_length)


    # rec   = vosk.KaldiRecognizer(model, SAMPLE_RATE)
    # stream = p.open(format=pyaudio.paInt16, channels=1, rate=SAMPLE_RATE, input=True,
    #                 frames_per_buffer=BUFFER_SIZE, input_device_index=MICROPHONE_INDEX)

    # def get_next_audio_frame():
    #   pass
    # while True:
    #   audio_frame = get_next_audio_frame()
    #   keyword_index = porcupine.process(audio_frame)
    """
    if keyword_index == 0:
    # detected `–æ—Ç–º–µ–Ω–∞`
    elif keyword_index == 1:
    # detected `–ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ...üëå`
    """
    recorder.start()
    while True:
        # –°—á–∏—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Ç–æ–∫–∞
        pcm = recorder.read()
        keyword_index = porcupine.process(pcm)
        if keyword_index == 0:
            print('–æ—Ç–º–µ–Ω–∞')
            # conn.send('–æ—Ç–º–µ–Ω–∞')
            
if __name__ == '__main__':
    main()
    # main(conn)
